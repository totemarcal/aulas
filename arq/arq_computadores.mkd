
# üìò Introdu√ß√£o √† Arquitetura de Computadores

## **Se√ß√£o 1: Conceitos B√°sicos de Inform√°tica**

---

## üîπ 1.1 O que √© um Computador?

Um **computador** √© uma m√°quina composta por partes **eletr√¥nicas e eletromec√¢nicas** capaz de:

‚úÖ Coletar dados
‚úÖ Manipular dados
‚úÖ Fornecer resultados do processamento

> Ou seja, √© um **equipamento de processamento eletr√¥nico de dados (EDP)**.

### üîÅ Esquema b√°sico do processamento de dados:

```
Entrada de Dados ‚Üí Processamento ‚Üí Sa√≠da de Informa√ß√£o
```

A **informa√ß√£o** √© o **produto final** do processamento. Para isso, o computador executa um conjunto de **instru√ß√µes** (programa), normalmente com **m√≠nima interven√ß√£o humana**.

---

### üß† Benef√≠cios do uso de computadores:

| Benef√≠cio                    | Explica√ß√£o                                            |
| ---------------------------- | ----------------------------------------------------- |
| üöÄ Velocidade                | Processa e fornece informa√ß√µes em milissegundos       |
| üéØ Precis√£o                  | Fornece dados exatos conforme a instru√ß√£o do programa |
| üîÅ Repetitividade            | Excelente para tarefas repetitivas sem erro           |
| üí∞ Redu√ß√£o de Custos         | Automatiza tarefas operacionais                       |
| üåê Compartilhamento de dados | Integra sistemas e usu√°rios via redes e dispositivos  |

---

## üîπ 1.2 Computadores: Hardware e Software

Todo sistema computacional √© composto por **duas partes fundamentais**:

| Parte        | Descri√ß√£o                                                                   |
| ------------ | --------------------------------------------------------------------------- |
| **Hardware** | Parte **f√≠sica**, tang√≠vel: teclado, monitor, placas, cabos, CPU etc.       |
| **Software** | Parte **l√≥gica**, intang√≠vel: programas e sistemas que d√£o ‚Äúvida‚Äù √† m√°quina |

> üí° **Sem software, o hardware n√£o executa nenhuma tarefa √∫til.**

---

### üî∏ 1.2.1 Hardware: Componentes B√°sicos

#### üß© 1.2.1.1 Unidades de Entrada e Sa√≠da (E/S)

Os dispositivos de Entrada e Sa√≠da s√£o formados por:

* Um **controlador** (chip respons√°vel pelo controle f√≠sico)
* O **dispositivo em si** (que executa a entrada ou sa√≠da de dados)

---

### üì• Dispositivos de Entrada

Permitem que o usu√°rio **insira dados** no sistema.

| Tipo de Dado | Exemplos de Dispositivos |
| ------------ | ------------------------ |
| Texto        | Teclado                  |
| Movimento    | Mouse                    |
| Imagem       | Scanner                  |
| Som          | Microfone                |

---

### üì§ Dispositivos de Sa√≠da

Apresentam os **resultados do processamento**.

| Tipo de Sa√≠da      | Exemplos de Dispositivos                     |
| ------------------ | -------------------------------------------- |
| Visual             | Monitor de v√≠deo, projetores                 |
| Impressa           | Impressoras, plotters                        |
| Sensores/Terminais | Terminais banc√°rios, pain√©is, telas digitais |

---

### üîÅ Dispositivos de Entrada e Sa√≠da (E/S)

Atuam **tanto para entrada quanto para sa√≠da de dados**:

| Dispositivo       | Fun√ß√£o E/S                             |
| ----------------- | -------------------------------------- |
| Disco r√≠gido (HD) | L√™ e grava dados                       |
| Pen Drive (USB)   | Armazena e transfere dados             |
| CD/DVD            | Leitura e/ou grava√ß√£o de dados         |
| Tela Touchscreen  | Entrada (toque) e sa√≠da (visualiza√ß√£o) |


---

## üîπ Mem√≥ria

### üß† Conceito de Mem√≥ria em Computadores

Para que um computador funcione corretamente, ele **precisa armazenar dados** ‚Äî tanto os que est√£o sendo processados quanto os que ser√£o usados posteriormente. Esse armazenamento pode ser:

* **Tempor√°rio** (vol√°til) ‚Äî usado durante a execu√ß√£o de programas
* **Permanente** (n√£o vol√°til) ‚Äî usado para guardar dados mesmo quando o computador est√° desligado

Essa estrutura √© chamada genericamente de **mem√≥ria**.

---

### üî¢ Como a informa√ß√£o √© representada?

* A **menor unidade de informa√ß√£o** em um computador √© o **bit** (binary digit)

  * Um bit pode ser: `0` ou `1`
* Para representar dados mais complexos, bits s√£o agrupados em:

  * **Byte**: conjunto de **8 bits**

> Exemplo:
>
> * 1 caractere (letra "A") = 1 byte = `01000001`

---

### üìè Unidades de Medida de Armazenamento

| Unidade         | Equival√™ncia |
| --------------- | ------------ |
| 1 Byte          | 8 bits       |
| 1 Kilobyte (KB) | 1024 Bytes   |
| 1 Megabyte (MB) | 1024 KB      |
| 1 Gigabyte (GB) | 1024 MB      |
| 1 Terabyte (TB) | 1024 GB      |

> ‚ö†Ô∏è Aten√ß√£o: 1 KB = 1024 bytes, e n√£o 1000 bytes, pois segue base bin√°ria (2¬π‚Å∞).

---

### üß∞ Tipos comuns de mem√≥ria (adi√ß√£o recomendada)

| Tipo          | Fun√ß√£o                             | Vol√°til? |
| ------------- | ---------------------------------- | -------- |
| RAM           | Mem√≥ria de trabalho tempor√°ria     | Sim      |
| ROM           | Armazena o firmware                | N√£o      |
| Cache         | Armazenamento r√°pido pr√≥ximo √† CPU | Sim      |
| HD/SSD        | Armazenamento em disco             | N√£o      |
| Registradores | Armazenamento imediato na CPU      | Sim      |

---

## üîπ 1.2.1.3 Unidade Central de Processamento (UCP ou CPU)

### ‚öôÔ∏è O que √© a CPU?

A **CPU (Central Processing Unit)** √© o c√©rebro do computador.
√â respons√°vel por **interpretar e executar instru√ß√µes** fornecidas pelos programas (software).

> Tamb√©m √© chamada de **processador** ou **microprocessador**.

---

### üîÅ Ciclo de Instru√ß√£o da CPU

A CPU executa um ciclo cont√≠nuo de opera√ß√µes:

1. **Busca (Fetch)**: busca a pr√≥xima instru√ß√£o na mem√≥ria
2. **Decodifica (Decode)**: identifica qual opera√ß√£o deve ser feita
3. **Executa (Execute)**: realiza a opera√ß√£o sobre os dados
4. **Atualiza (Store/Increment)**: armazena o resultado e avan√ßa para a pr√≥xima instru√ß√£o

Este ciclo √© chamado de **Ciclo de M√°quina**.

---

### üß© Componentes Internos da CPU

| Componente                            | Fun√ß√£o Principal                                                |
| ------------------------------------- | --------------------------------------------------------------- |
| **UC (Unidade de Controle)**          | Controla o fluxo das instru√ß√µes e sinais de controle            |
| **ULA (Unidade L√≥gica e Aritm√©tica)** | Realiza c√°lculos e opera√ß√µes l√≥gicas                            |
| **Registradores**                     | Pequena mem√≥ria interna usada para armazenar dados tempor√°rios  |
| **Contador de Programa (PC)**         | Guarda o endere√ßo da pr√≥xima instru√ß√£o a ser buscada na mem√≥ria |

---

### üìç Funcionamento do Contador de Programa

* Cada vez que uma instru√ß√£o √© executada, o **Contador de Programa (PC)** √© atualizado para apontar para o **endere√ßo da pr√≥xima instru√ß√£o**.
* Assim, garante-se a **execu√ß√£o sequencial** do programa (salvo instru√ß√µes de salto/loop).

---

### üîÑ Esquema do Ciclo da CPU:

![texto](./ucp.png)

---

## **1.2.2 Software**

Um **programa de computador** √© uma sequ√™ncia de instru√ß√µes ou declara√ß√µes, escritas de forma que o computador possa interpret√°-las, com o objetivo de produzir um determinado resultado.
O termo **software** pode ser usado para:

* Um programa espec√≠fico.
* Um conjunto de programas.
* Todo o conjunto de programas instalados em um computador.

De forma geral, os softwares podem ser classificados em **software b√°sico** e **software aplicativo**.

---

### **1.2.2.1 Software B√°sico**

S√£o softwares **essenciais para o funcionamento do computador**.
T√™m como fun√ß√µes principais:

* Controlar os dispositivos (hardware).
* Fazer a comunica√ß√£o entre o computador e outros programas.
* Garantir que aplicativos possam ser executados corretamente.

**Principais categorias:**

#### a) **Sistemas ou Ambientes Operacionais**

* Mais conhecidos como **Sistemas Operacionais (SO)**.
* S√£o o n√∫cleo que faz o computador "funcionar" de forma organizada, coordenando processador, mem√≥ria, dispositivos de entrada/sa√≠da, armazenamento etc.
* Sem um SO, o computador seria apenas um conjunto de placas sem utilidade.
* Exemplos:

  * **Windows** (Microsoft)
  * **Linux** (diversas distribui√ß√µes como Ubuntu, Fedora)
  * **macOS** (Apple)

#### b) **Linguagens de Programa√ß√£o**

* Servem como meio de comunica√ß√£o entre **humanos** e **computadores**.
* Classificam-se em:

  **1. Linguagens de baixo n√≠vel**

  * Mais pr√≥ximas do c√≥digo bin√°rio (linguagem de m√°quina).
  * Alta performance, mas dif√≠cil de programar.
  * Exemplos: Assembly, linguagem de m√°quina.

  **2. Linguagens de alto n√≠vel**

  * Mais pr√≥ximas da linguagem humana.
  * Usam palavras e estruturas l√≥gicas mais compreens√≠veis.
  * Exigem tradu√ß√£o para c√≥digo bin√°rio por meio de um **compilador** ou **interpretador**.
  * Exemplos: Java, Python, C, C++, JavaScript.

---

### **1.2.2.2 Software Aplicativo**

S√£o programas criados para **executar tarefas espec√≠ficas** para o usu√°rio.
Podem ser de **uso geral** ou **uso espec√≠fico**.

#### a) **Uso Geral**

Fornecem funcionalidades comuns a diferentes √°reas.
Exemplos:

* **Processadores de texto**: cria√ß√£o e edi√ß√£o de documentos.

  * Word (Microsoft)
  * WordPerfect (Corel)
  * OpenEdit (open source)

* **Planilhas eletr√¥nicas**: c√°lculos, gr√°ficos, organiza√ß√£o de dados.

  * MS Excel
  * Lotus 1-2-3
  * Quattro Pro
  * OpenCalc

* **Programas gr√°ficos**: cria√ß√£o de imagens, ilustra√ß√µes e anima√ß√µes.

  * CorelDRAW
  * Adobe Photoshop

#### b) **Uso Espec√≠fico**

* Desenvolvidos sob medida para atender a necessidades espec√≠ficas de uma empresa ou setor.

* Exemplos:

  * Sistemas de controle financeiro.
  * Gest√£o de estoque e produ√ß√£o.
  * Sistemas de faturamento.
  * Controle de clientes.

* Normalmente dependem de **Sistemas Gerenciadores de Banco de Dados (SGBD)** para manipular grandes volumes de informa√ß√£o.

  * Exemplos: MySQL, Oracle, PostgreSQL, SQL Server.


Perfeito, vou explicar de forma **mais detalhada** cada sistema de numera√ß√£o e como fazer a convers√£o entre eles, com l√≥gica passo a passo.

---

## **3.2 Sistemas de Numera√ß√£o**

Computadores s√≥ entendem **0** e **1**, mas n√≥s, humanos, usamos naturalmente o **decimal** (0 a 9).
Por isso, precisamos conhecer tr√™s sistemas principais:

* **Decimal** ‚Üí Base 10 (usado no dia a dia)
* **Bin√°rio** ‚Üí Base 2 (usado internamente pelos computadores)
* **Hexadecimal** ‚Üí Base 16 (usado para representar dados de forma compacta)

Esses sistemas s√£o **posicionais**, ou seja, cada d√≠gito vale **um n√∫mero multiplicado pela base elevada √† posi√ß√£o**.

---

### **1. Sistema Decimal (Base 10)**

* Base: 10 s√≠mbolos ‚Üí 0 1 2 3 4 5 6 7 8 9

* Origem hist√≥rica: provavelmente relacionado ao fato de termos 10 dedos nas m√£os, facilitando a contagem.

* Uso: cotidiano, medidas, dinheiro, estat√≠sticas etc.

Regras:

* Cada posi√ß√£o representa uma pot√™ncia de 10 (unidade, dezena, centena, milhar...).

* Exemplo de leitura: o n√∫mero 5 432 significa 5 milhares, 4 centenas, 3 dezenas e 2 unidades.


* D√≠gitos poss√≠veis: **0, 1, 2, 3, 4, 5, 6, 7, 8, 9**
* Base: **10**
* Cada posi√ß√£o aumenta sua pot√™ncia de 10 conforme andamos da direita para a esquerda.

**Exemplo:** 4 3 4 5

$$
4345 = (4 √ó 10^3) + (3 √ó 10^2) + (4 √ó 10^1) + (5 √ó 10^0)
$$

$$
= 4000 + 300 + 40 + 5
$$

üí° *No decimal, 10‚Å∞ = 1, 10¬π = 10, 10¬≤ = 100, 10¬≥ = 1000, e assim por diante.*

---

### **2. Sistema Bin√°rio (Base 2)**

* Base: 2 s√≠mbolos ‚Üí 0 e 1.

Motivo de uso no computador:

* Circuitos eletr√¥nicos digitais s√≥ diferenciam dois estados est√°veis (ligado/desligado, presen√ßa/aus√™ncia de corrente).

* Cada d√≠gito bin√°rio √© chamado bit (binary digit).

Regras:

* Cada posi√ß√£o representa uma pot√™ncia de 2.

* O computador interpreta cada sequ√™ncia de bits como n√∫meros, caracteres, cores, sons ou instru√ß√µes, dependendo do contexto.

Vantagens:

* Alta confiabilidade ‚Äî sinais bin√°rios s√£o mais resistentes a ru√≠dos.

* F√°cil implementa√ß√£o em hardware.

* D√≠gitos poss√≠veis: **0 e 1**
* Base: **2**
* Cada posi√ß√£o vale uma pot√™ncia de 2: **2‚Å∞ = 1**, **2¬π = 2**, **2¬≤ = 4**, **2¬≥ = 8**, etc.

**Exemplo:** 1 1 0 0 1 0 1 0‚ÇÇ

$$
11001010_2 = (1 √ó 2^7) + (1 √ó 2^6) + (0 √ó 2^5) + (0 √ó 2^4) + (1 √ó 2^3) + (0 √ó 2^2) + (1 √ó 2^1) + (0 √ó 2^0)
$$

$$
= 128 + 64 + 0 + 0 + 8 + 0 + 2 + 0 = 202_{10}
$$

üí° *Computadores usam bin√°rio porque cada bit pode estar ligado (1) ou desligado (0), o que √© f√°cil de representar fisicamente com eletricidade.*

---

### **3. Sistema Hexadecimal (Base 16)**

* Base: 16 s√≠mbolos ‚Üí 0 1 2 3 4 5 6 7 8 9 A B C D E F

* Letras de A a F representam valores de 10 a 15.

Motivo de uso no computador:

* √â uma forma mais compacta e leg√≠vel de representar n√∫meros bin√°rios.

* Cada d√≠gito hexadecimal equivale exatamente a 4 bits (meio byte).

* Usado para endere√ßos de mem√≥ria, c√≥digos de cores, instru√ß√µes de m√°quina e depura√ß√£o de software.

Regras:

* Cada posi√ß√£o representa uma pot√™ncia de 16.

* √â muito comum em programa√ß√£o e engenharia eletr√¥nica.

* D√≠gitos poss√≠veis:
  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A(10), B(11), C(12), D(13), E(14), F(15)
* Base: **16**
* Cada posi√ß√£o vale **pot√™ncia de 16**: 16‚Å∞ = 1, 16¬π = 16, 16¬≤ = 256...

**Exemplo:** 3E0‚ÇÅ‚ÇÜ

$$
3E0_{16} = (3 √ó 16^2) + (E √ó 16^1) + (0 √ó 16^0)
$$

$$
= (3 √ó 256) + (14 √ó 16) + (0 √ó 1)
$$

$$
= 768 + 224 + 0 = 992_{10}
$$

### Resumo Comparativo

| Sistema     | Base | S√≠mbolos | Onde √© mais usado                          |
| ----------- | ---- | -------- | ------------------------------------------ |
| Decimal     | 10   | 0‚Äì9      | Cotidiano, c√°lculos humanos                |
| Bin√°rio     | 2    | 0, 1     | Processamento interno do computador        |
| Hexadecimal | 16   | 0‚Äì9, A‚ÄìF | Representa√ß√£o compacta de valores bin√°rios |


Aqui vai um conjunto de exerc√≠cios pr√°ticos sobre **sistemas de numera√ß√£o** nas bases **2 (bin√°rio)**, **10 (decimal)** e **16 (hexadecimal)**, sem entrar na parte de convers√£o, mas que estimulam o racioc√≠nio sobre como esses sistemas funcionam.

---

## **Exerc√≠cios ‚Äî Sistemas de Numera√ß√£o (Bases 2, 10 e 16)**

### **1. Completando sequ√™ncias**

Preencha as lacunas das sequ√™ncias abaixo de acordo com o sistema indicado:

a) **Bin√°rio (base 2):**

```
000, 001, 010, ___, ___, 101, 110, ___
```

b) **Decimal (base 10):**

```
193, 194, ___, ___, 197, 198, ___
```

c) **Hexadecimal (base 16):**

```
1A, 1B, 1C, ___, ___, 1F, ___
```

---

### **2. Identificando padr√µes**

Marque com **V** (verdadeiro) ou **F** (falso):

(   ) No sistema bin√°rio, depois de 1 vem 10.
(   ) No sistema decimal, depois de 9 vem 11.
(   ) No sistema hexadecimal, a letra ‚ÄúA‚Äù representa o valor decimal 11.
(   ) O hexadecimal usa d√≠gitos de 0 at√© 15.

---

### **3. Contagem por bases**

Escreva os **5 pr√≥ximos n√∫meros** de cada sequ√™ncia:

a) **Base 2:**

```
1010, 1011, ___, ___, ___, ___, ___
```

b) **Base 10:**

```
45, 46, ___, ___, ___, ___, ___
```

c) **Base 16:**

```
2E, 2F, ___, ___, ___, ___, ___
```

---

### **4. Reconhecendo a base**

Cada n√∫mero abaixo pertence a um sistema diferente. Identifique se est√° em **base 2**, **base 10** ou **base 16** (n√£o √© necess√°rio converter):

a) `101011` ‚Üí \_\_\_\_\_\_\_
b) `7F` ‚Üí \_\_\_\_\_\_\_
c) `128` ‚Üí \_\_\_\_\_\_\_
d) `1101` ‚Üí \_\_\_\_\_\_\_
e) `1B3` ‚Üí \_\_\_\_\_\_\_

---

